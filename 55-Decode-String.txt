Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"

-----

class Solution {
    public String decodeString(String s) {
        Stack<Integer> countStack = new Stack<>(); // Tekrar sayılarını tutacak stack
        Stack<StringBuilder> stringStack = new Stack<>(); // String parçalarını tutacak stack
        StringBuilder currentString = new StringBuilder(); // Şu anki string
        int k = 0; // Tekrar sayısı
        
        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                // Rakamsa, tekrar sayısını hesapla (birden fazla basamaklı olabilir)
                k = k * 10 + (ch - '0');
            } else if (ch == '[') {
                // Açık parantez görünce, tekrar sayısını ve şu anki stringi stack'e ekle
                countStack.push(k);
                stringStack.push(currentString);
                // Değerleri sıfırla
                k = 0;
                currentString = new StringBuilder();
            } else if (ch == ']') {
                // Kapalı parantez görünce, son string parçasını ve tekrar sayısını al
                StringBuilder temp = currentString;
                currentString = stringStack.pop();
                int count = countStack.pop();
                
                // String parçasını tekrar sayısı kadar tekrarla
                for (int i = 0; i < count; i++) {
                    currentString.append(temp);
                }
            } else {
                // Normal karakter ise, şu anki string'e ekle
                currentString.append(ch);
            }
        }
        
        return currentString.toString();
    }
}
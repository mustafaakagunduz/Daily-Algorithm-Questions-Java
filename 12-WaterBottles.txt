There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

--------

Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.

---------

class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        int totalDrunk = 0;
        int emptyBottles = 0;
        
        // Initially drink all bottles
        totalDrunk = numBottles;
        emptyBottles = numBottles;
        
        // While we have enough empty bottles to exchange
        while (emptyBottles >= numExchange) {
            // Calculate how many full bottles we get from exchange
            int newBottles = emptyBottles / numExchange;
            
            // Update total drunk by adding new bottles
            totalDrunk += newBottles;
            
            // Update empty bottles: 
            // remaining empties that couldn't be exchanged + new empties from drinking
            emptyBottles = (emptyBottles % numExchange) + newBottles;
        }
        
        return totalDrunk;
    }
}

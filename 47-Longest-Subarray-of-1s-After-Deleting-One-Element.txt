Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.

------

Çözüm Yaklaşımı:

Sliding window tekniği kullanacağız
Window içinde en fazla bir tane 0'a izin vereceğiz (çünkü onu sileceğiz)
Window'u genişletip daraltarak en uzun alt diziyi bulacağız

------

class Solution {
    public int longestSubarray(int[] nums) {
        // İki pointer kullanacağız: left ve right
        int left = 0;
        int maxLength = 0;
        int zeroCount = 0;  // window içindeki 0 sayısı
        
        // right pointer'ı sağa doğru hareket ettiriyoruz
        for (int right = 0; right < nums.length; right++) {
            // Eğer 0 görürsek sayacı arttırıyoruz
            if (nums[right] == 0) {
                zeroCount++;
            }
            
            // Window içinde birden fazla 0 varsa
            // left pointer'ı hareket ettirerek window'u daraltıyoruz
            while (zeroCount > 1) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            
            // Current window size'ı hesaplıyoruz
            // -1 yapıyoruz çünkü mutlaka bir eleman silmemiz gerekiyor
            maxLength = Math.max(maxLength, right - left);
        }
        
        // Eğer hiç 0 yoksa, array uzunluğu - 1 döndürmeliyiz
        // Çünkü mutlaka bir eleman silmeliyiz
        return maxLength;
    }
}
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].

edge caseler:
-[9] için yeni sonuç [1,0] olmalı.
-[9,9,9] -> [1,0,0,0]), olmalı gibi. yani son basamağın 9'dan büyük olduğu durmu değerlendirmeliyiz.

class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        
        // Start from the rightmost digit (least significant)
        for (int i = n - 1; i >= 0; i--) {
            // Increment the current digit
            digits[i]++;
            
            // If there's no carry-over, we're done
            if (digits[i] < 10) {
                return digits;
            }
            
            // Otherwise, set the current digit to 0 and continue to the next digit
            digits[i] = 0;
        }
        
        // If we're here, it means we had a carry-over from the most significant digit
        // (e.g., [9,9,9] -> [1,0,0,0]), so we need to add a new digit 1 at the beginning
        int[] result = new int[n + 1];
        result[0] = 1;
        
        return result;
    }
}
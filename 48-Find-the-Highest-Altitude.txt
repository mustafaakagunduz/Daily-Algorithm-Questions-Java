There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.

You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). Return the highest altitude of a point.

 

Example 1:

Input: gain = [-5,1,5,0,-7]
Output: 1
Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.
Example 2:

Input: gain = [-4,-3,-2,-1,4,3,2]
Output: 0
Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.


-----

Bu çözümün çalışma mantığı:

İlk olarak başlangıç noktasının yüksekliğini (0) içeren yeni bir dizi oluşturuyoruz
Her noktadaki yüksekliği, bir önceki yükseklik + net kazanç olarak hesaplıyoruz (prefix sum)
Son olarak bu yükseklikler arasından en büyük değeri bulup döndürüyoruz

------

class Solution {
    public int largestAltitude(int[] gain) {
        int[] newGain = new int[gain.length + 1];
        newGain[0] = 0;  // başlangıç yüksekliği 0
        
        // prefix sum hesaplama
        for(int i = 1; i < gain.length + 1; i++) {
            newGain[i] = newGain[i-1] + gain[i-1];
        }
        
        // maximum yüksekliği bulma
        int max = Integer.MIN_VALUE;
        for(int i : newGain) {
            if(i > max) {
                max = i;
            }
        }
        
        return max;
    }
}
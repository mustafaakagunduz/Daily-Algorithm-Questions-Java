AGiven the head of a singly linked list, reverse the list, and return the reversed list.

-------

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

--------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;  // previous'ı burada prev olarak kullanıyoruz
        ListNode curr = head;  // current'ı başta head olarak atıyoruz
        
        while (curr != null) {  // current null değilse devam et
            ListNode nextNode = curr.next;  // current'ın next düğümünü geçici değişkende sakla
            curr.next = prev;  // current'ın next'ini prev'ye yönlendir
            prev = curr;  // prev'i current'a güncelle
            curr = nextNode;  // current'ı nextNode'ya güncelle
        }
        
        return prev;  // finalda prev, tersine çevrilmiş listenin başını tutuyor
    }
}
---

Algoritmanın temel adımları şöyle:

prev'i null ile başlatıyorum çünkü tersine çevrilmiş listenin son elemanı null'ı göstermelidir
curr'i liste başı (head) ile başlatıyorum
curr null olana kadar (listenin sonuna gelene kadar) döngüyü sürdürüyorum

Her adımda:

1-curr'in bir sonraki düğümünü kaybetmemek için geçici bir değişkende saklıyorum
2-curr'in yönünü prev'e çeviriyorum
3-prev ve curr işaretçilerini ilerleterek işlemi tekrarlıyorum


Sonunda prev, tersine çevrilmiş listenin başını tutacaktır"

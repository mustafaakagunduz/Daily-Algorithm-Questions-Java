Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

yani: tek indislerdekileri başa, çift indislerdekileri sona

Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]

---

class Solution {
    public ListNode oddEvenList(ListNode head) {
        // Boş liste veya tek düğümlü liste kontrolü
        if (head == null || head.next == null) {
            return head;
        }
        
        // odd ve even listelerinin başlangıç düğümlerini tanımla
        ListNode odd = head; // İlk düğüm (1. indeks) tek sayı
        ListNode even = head.next; // İkinci düğüm (2. indeks) çift sayı
        ListNode evenHead = even; // Çift sayılı listenin başını kaydet
        
        // Listeyi dolaş ve düğümleri ayır
        while (even != null && even.next != null) {
            odd.next = even.next; // Tek düğümü bir sonraki tek düğüme bağla
            odd = odd.next; // Tek listeyi ilerlet
            
            even.next = odd.next; // Çift düğümü bir sonraki çift düğüme bağla
            even = even.next; // Çift listeyi ilerlet
        }
        
        // Tek ve çift listeleri birleştir
        odd.next = evenHead;
        
        return head;
    }
}
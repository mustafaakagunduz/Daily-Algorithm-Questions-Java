You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    private int maxLength = 0;
    
    public int longestZigZag(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        // Start DFS from the root node
        // Initial direction doesn't matter as we will try both
        dfs(root.left, 1, true); // Start with left direction
        dfs(root.right, 1, false); // Start with right direction
        
        return maxLength;
    }
    
    /**
     * Depth-first search to explore zigzag paths
     * @param node Current node
     * @param length Current zigzag path length
     * @param isLeft true if we came from parent's left, false if from right
     */
    private void dfs(TreeNode node, int length, boolean isLeft) {
        if (node == null) {
            return;
        }
        
        // Update the maximum zigzag path length
        maxLength = Math.max(maxLength, length);
        
        if (isLeft) {
            // Current node is a left child, so next zigzag step is to the right
            dfs(node.right, length + 1, false); // Continue zigzag
            dfs(node.left, 1, true); // Reset and start a new zigzag path
        } else {
            // Current node is a right child, so next zigzag step is to the left
            dfs(node.left, length + 1, true); // Continue zigzag
            dfs(node.right, 1, false); // Reset and start a new zigzag path
        }
    }
}

Bu ZigZag yolu problemi için Java çözümü oluşturdum. Çözüm, ikili ağaçtaki en uzun ZigZag yolunu bulmak için derinlik öncelikli arama (DFS) kullanıyor.
İşte bu çözümün nasıl çalıştığının açıklaması:

Temel Yaklaşım: Her düğümden başlayan zigzag yollarını keşfetmek için derinlik öncelikli arama (DFS) kullanılır.
Durum Takibi: Algoritmada üç şeyi takip ediyoruz:

Mevcut düğüm (node)
Şu ana kadar olan zigzag yolunun uzunluğu (length)
Bir önceki adımdaki yön (isLeft - sola mı yoksa sağa mı gittiğimizi belirtir)


Rekürsif DFS Fonksiyonu:

Eğer geçerli düğüm null ise, rekürsiyonu sonlandırırız.
Her düğümde, mevcut zigzag uzunluğunu global maksimum ile karşılaştırıp gerekirse güncelliyoruz.
Mevcut yöne bağlı olarak:

Eğer sol yönden geldiysek, zigzag için bir sonraki adım sağ olmalıdır.
Eğer sağ yönden geldiysek, zigzag için bir sonraki adım sol olmalıdır.




İki Tip Çağrı:

Zigzag devam ettirme: Mevcut zigzag yoluna devam etmek için, zıt yöndeki çocuk düğüme gideriz ve uzunluğu bir artırırız.
Yeni zigzag başlatma: Aynı zamanda, her düğümde yeni bir zigzag yolu başlatma olasılığını da kontrol ederiz. Bu durumda uzunluğu 1'e resetleriz.


Başlangıç: Kök düğümden başlayarak hem sol hem de sağ yönlerde zigzag yolları aramaya başlarız.

Bu çözüm ağaçtaki her düğümü tam olarak bir kez ziyaret ettiği için zaman karmaşıklığı O(n)'dir, burada n ağaçtaki düğüm sayısıdır. Uzay karmaşıklığı ise rekürsif çağrı yığını için O(h) olur, burada h ağacın yüksekliğidir.

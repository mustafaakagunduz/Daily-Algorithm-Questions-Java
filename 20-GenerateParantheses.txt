class Sol {
    
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        Stack<Character> stack = new Stack<>();
        backtrackFunc(n, 0, 0, stack, result);
        return result;
    }

    private void backtrackFunc(int n, int openCounter, int closedCounter, Stack<Character> stack, List<String> res) {
        if (openCounter == closedCounter && openCounter == n) {
            StringBuilder sb = new StringBuilder();
            for (char c : stack) {
                sb.append(c);
            }
            res.add(sb.toString());
            return;
        }

        if (openCounter < n) {
            stack.push('(');
            backtrackFunc(n, openCounter + 1, closedCounter, stack, res);
            stack.pop();
        }
        if (closedCounter < openCounter) {
            stack.push(')');
            backtrackFunc(n, openCounter, closedCounter + 1, stack, res);
            stack.pop();
        }
    }
}

class Sol {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        // Create a new array with 0 at the beginning and end
        int[] f = new int[flowerbed.length + 2];
        System.arraycopy(flowerbed, 0, f, 1, flowerbed.length);

        // Iterate through the array (skip the first and last positions of the new array)
        for (int i = 1; i < f.length - 1; i++) {
            if (f[i - 1] == 0 && f[i] == 0 && f[i + 1] == 0) {
                f[i] = 1; // Plant a flower
                n--;      // Decrease the number of flowers to plant

                
            }
        }

        return n <= 0; // Check if all required flowers are planted
    }
}


//without adding extra zeros:

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {

        int length = flowerbed.length;

        for(int i=0; i<length; i++){

            if(flowerbed[i]==0){

                boolean isLeftEmpty = (i==0 || flowerbed[i-1]==0);
                boolean isRightEmpty = (i==length-1 || flowerbed[i+1]==0);

                if(isLeftEmpty && isRightEmpty){
                    flowerbed[i]=1;
                    n--;
                }
            }
        }
        
        return n <= 0;
        
    }
}
